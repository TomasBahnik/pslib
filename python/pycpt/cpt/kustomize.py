import os
import re
import subprocess
from pathlib import Path
from typing import List

import yaml
from flatten_dict import flatten, unflatten

from cpt.sizing import Sizing, containers


class KubernetesManifest(Sizing):
    """ manifest generated by Helm charts or Kustomize  loads generic manifest with placeholder for variables
        are replaced and output is written to interpolated_m which is used for actual deployment
    """

    def __init__(self, kustomize_builds_dir, kustomize_git_dir, subfolder, test_env: str,
                 generic_m, interpolated_m):
        super().__init__(kustomize_builds_dir, subfolder, generic_m, interpolated_m)
        self.variable_placeholder_re = r"\$\(([\w]+)\)"
        # location of files with values of context dependent variables
        self.kustomize_git_dir = kustomize_git_dir
        self.variables: dict = {}
        # yaml file with env definition
        self.env_def = f"{test_env}.yaml"

    def interpolate_image(self, vars, image):
        try:
            ret = image
            placeholders = re.findall(self.variable_placeholder_re, ret)
            for placeholder in placeholders:
                self.logger.debug(f"{image} has placeholders {placeholders}")
                value = vars[placeholder]
                ret = re.sub(self.variable_placeholder_re, value, ret, 1)
            self.logger.debug(f"{image}={ret}")
        except KeyError as e:
            self.logger.error(f"No {image} in test environment")
            ret = None
        return ret

    def load_manifest(self):
        containers_tuple = ('spec', 'template', 'spec', 'containers')
        init_containers_tuple = ('spec', 'template', 'spec', 'initContainers')
        self.logger.info(f"Loading manifest {self.generic_yaml.absolute()}")
        with open(self.generic_yaml, 'r') as stream:
            try:
                docs: List = list(yaml.safe_load_all(stream))
                cont_docs = containers(docs)
                for i in range(0, len(docs)):
                    doc = docs[i]
                    if doc is not None and doc in cont_docs:
                        self.logger.debug("Processing doc kind : {}".format(doc["kind"]))
                        name = None
                        try:
                            doc_flat = flatten(doc)
                            for c in doc_flat[containers_tuple]:
                                name = c['name']
                                image = c["image"]
                                image_inter = self.interpolate_image(self.variables, image)
                                c['image'] = image_inter
                            try:
                                i_c = doc_flat[init_containers_tuple]
                                for c in i_c:
                                    image = c['image']
                                    image_inter = self.interpolate_image(self.variables, image)
                                    c['image'] = image_inter
                            except KeyError as e:
                                self.logger.error(f"initContainers not present for {name}")
                            doc = unflatten(doc_flat)
                            with open(Path(self.kustomize_builds_dir, name + '_inter.yaml'), 'w') as outfile:
                                yaml.dump(doc, outfile, default_flow_style=False)
                        except KeyError as e:
                            self.logger.error(f"image is empty dict")
                    docs[i] = doc
                with open(self.interpolated_yaml, 'w') as outfile:
                    self.logger.info(f"Writing {self.interpolated_yaml.resolve()}")
                    yaml.dump_all(docs, outfile, default_flow_style=False)
            except yaml.YAMLError as e:
                self.logger.error(e)

    def switch_loaded_config_map(self):
        """reads and let active only test env config map and saves the yaml back"""
        kust_yaml = Path(self.kustomize_git_dir, 'kustomization.yaml')
        new_doc = []
        with open(kust_yaml, 'r') as r_stream:
            try:
                docs = list(yaml.safe_load_all(r_stream))
                resources = docs[0]['resources'] if len(docs) == 1 else None
                self.logger.debug(f"env def : {self.env_def}")
                if resources is not None:
                    resources.append(self.env_def)
                    new_doc = docs[0]
            except yaml.YAMLError as e:
                self.logger.error(e)

        with open(kust_yaml, 'w') as w_stream:
            try:
                yaml.dump(new_doc, w_stream)
            except yaml.YAMLError as e:
                self.logger.error(e)

    def load_vars(self):
        vars_yaml = Path(self.kustomize_git_dir, self.env_def)
        self.logger.info(f"Loading variables from {vars_yaml.absolute()}")
        with open(vars_yaml, 'r') as stream:
            try:
                docs = yaml.load_all(stream, Loader=yaml.FullLoader)
                for doc in docs:
                    try:
                        data_dict = doc["data"]
                        self.variables.update(data_dict)
                    except KeyError as e:
                        self.logger.error(e)
                    continue
            except yaml.YAMLError as e:
                self.logger.error(e)


def kustomize_build(build_dir: Path, git_dir: Path, subfolder: str, output_file: str):
    output_file_path = Path(build_dir, subfolder, output_file)
    with open(output_file_path, "w") as outfile:
        build_cmd = ['kustomize', 'build', str(git_dir.absolute())]
        print(f"running {build_cmd} in {os.getcwd()}")
        p = subprocess.run(build_cmd, stdout=outfile, stderr=subprocess.PIPE)
        error = p.stderr
        print(f"{p}\nerror {error}")


def git_checkout(git_dir: Path, file: str):
    cwd = os.getcwd()
    os.chdir(git_dir)
    subprocess.Popen(['git', 'checkout', file])
    os.chdir(cwd)
